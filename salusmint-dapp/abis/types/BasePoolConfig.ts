/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BasePoolConfigInterface extends utils.Interface {
  functions: {
    "accruedIncome()": FunctionFragment;
    "checkLiquidityRequirement()": FunctionFragment;
    "checkLiquidityRequirementForEA(uint256)": FunctionFragment;
    "checkLiquidityRequirementForPoolOwner(uint256)": FunctionFragment;
    "creditApprovalExpirationInSeconds()": FunctionFragment;
    "distributeIncome(uint256)": FunctionFragment;
    "evaluationAgent()": FunctionFragment;
    "evaluationAgentId()": FunctionFragment;
    "feeManager()": FunctionFragment;
    "getCoreData()": FunctionFragment;
    "getPoolSummary()": FunctionFragment;
    "humaConfig()": FunctionFragment;
    "initialize(string,address,address,address)": FunctionFragment;
    "isOwnerOrEA(address)": FunctionFragment;
    "maxCreditLine()": FunctionFragment;
    "onlyOwnerOrEA(address)": FunctionFragment;
    "onlyOwnerOrHumaMasterAdmin(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "payPeriodInDays()": FunctionFragment;
    "pool()": FunctionFragment;
    "poolAprInBps()": FunctionFragment;
    "poolDefaultGracePeriodInSeconds()": FunctionFragment;
    "poolLiquidityCap()": FunctionFragment;
    "poolName()": FunctionFragment;
    "poolToken()": FunctionFragment;
    "receivableRequiredInBps()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reverseIncome(uint256)": FunctionFragment;
    "rewardsAndLiquidityRateForEA()": FunctionFragment;
    "rewardsAndLiquidityRateForPoolOwner()": FunctionFragment;
    "setAPR(uint256)": FunctionFragment;
    "setCreditApprovalExpiration(uint256)": FunctionFragment;
    "setEARewardsAndLiquidity(uint256,uint256)": FunctionFragment;
    "setEvaluationAgent(uint256,address)": FunctionFragment;
    "setFeeManager(address)": FunctionFragment;
    "setHumaConfig(address)": FunctionFragment;
    "setMaxCreditLine(uint256)": FunctionFragment;
    "setPool(address)": FunctionFragment;
    "setPoolDefaultGracePeriod(uint256)": FunctionFragment;
    "setPoolLiquidityCap(uint256)": FunctionFragment;
    "setPoolName(string)": FunctionFragment;
    "setPoolOwnerRewardsAndLiquidity(uint256,uint256)": FunctionFragment;
    "setPoolPayPeriod(uint256)": FunctionFragment;
    "setPoolToken(address)": FunctionFragment;
    "setReceivableRequiredInBps(uint256)": FunctionFragment;
    "setWithdrawalLockoutPeriod(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "withdrawEAFee(uint256)": FunctionFragment;
    "withdrawPoolOwnerFee(uint256)": FunctionFragment;
    "withdrawProtocolFee(uint256)": FunctionFragment;
    "withdrawalLockoutPeriodInSeconds()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accruedIncome"
      | "checkLiquidityRequirement"
      | "checkLiquidityRequirementForEA"
      | "checkLiquidityRequirementForPoolOwner"
      | "creditApprovalExpirationInSeconds"
      | "distributeIncome"
      | "evaluationAgent"
      | "evaluationAgentId"
      | "feeManager"
      | "getCoreData"
      | "getPoolSummary"
      | "humaConfig"
      | "initialize"
      | "isOwnerOrEA"
      | "maxCreditLine"
      | "onlyOwnerOrEA"
      | "onlyOwnerOrHumaMasterAdmin"
      | "owner"
      | "payPeriodInDays"
      | "pool"
      | "poolAprInBps"
      | "poolDefaultGracePeriodInSeconds"
      | "poolLiquidityCap"
      | "poolName"
      | "poolToken"
      | "receivableRequiredInBps"
      | "renounceOwnership"
      | "reverseIncome"
      | "rewardsAndLiquidityRateForEA"
      | "rewardsAndLiquidityRateForPoolOwner"
      | "setAPR"
      | "setCreditApprovalExpiration"
      | "setEARewardsAndLiquidity"
      | "setEvaluationAgent"
      | "setFeeManager"
      | "setHumaConfig"
      | "setMaxCreditLine"
      | "setPool"
      | "setPoolDefaultGracePeriod"
      | "setPoolLiquidityCap"
      | "setPoolName"
      | "setPoolOwnerRewardsAndLiquidity"
      | "setPoolPayPeriod"
      | "setPoolToken"
      | "setReceivableRequiredInBps"
      | "setWithdrawalLockoutPeriod"
      | "transferOwnership"
      | "underlyingToken"
      | "withdrawEAFee"
      | "withdrawPoolOwnerFee"
      | "withdrawProtocolFee"
      | "withdrawalLockoutPeriodInSeconds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accruedIncome",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkLiquidityRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkLiquidityRequirementForEA",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLiquidityRequirementForPoolOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditApprovalExpirationInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeIncome",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "evaluationAgent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "evaluationAgentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolSummary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "humaConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwnerOrEA",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxCreditLine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onlyOwnerOrEA",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onlyOwnerOrHumaMasterAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payPeriodInDays",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolAprInBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolDefaultGracePeriodInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolLiquidityCap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolName", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receivableRequiredInBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reverseIncome",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsAndLiquidityRateForEA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsAndLiquidityRateForPoolOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAPR",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditApprovalExpiration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEARewardsAndLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEvaluationAgent",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHumaConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCreditLine",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolDefaultGracePeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolLiquidityCap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolOwnerRewardsAndLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolPayPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReceivableRequiredInBps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalLockoutPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEAFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPoolOwnerFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProtocolFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalLockoutPeriodInSeconds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accruedIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLiquidityRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLiquidityRequirementForEA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLiquidityRequirementForPoolOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditApprovalExpirationInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evaluationAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evaluationAgentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCoreData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolSummary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "humaConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOwnerOrEA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyOwnerOrEA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyOwnerOrHumaMasterAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payPeriodInDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolAprInBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolDefaultGracePeriodInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolLiquidityCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivableRequiredInBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reverseIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsAndLiquidityRateForEA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsAndLiquidityRateForPoolOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAPR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCreditApprovalExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEARewardsAndLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEvaluationAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHumaConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPoolDefaultGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolLiquidityCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolOwnerRewardsAndLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolPayPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReceivableRequiredInBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalLockoutPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEAFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPoolOwnerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalLockoutPeriodInSeconds",
    data: BytesLike
  ): Result;

  events: {
    "APRChanged(uint256,address)": EventFragment;
    "CreditApprovalExpirationChanged(uint256,address)": EventFragment;
    "EARewardsAndLiquidityChanged(uint256,uint256,address)": EventFragment;
    "EvaluationAgentChanged(address,address,uint256,address)": EventFragment;
    "EvaluationAgentRewardsWithdrawn(address,uint256,address)": EventFragment;
    "FeeManagerChanged(address,address)": EventFragment;
    "HDTChanged(address,address,address)": EventFragment;
    "HumaConfigChanged(address,address)": EventFragment;
    "IncomeDistributed(uint256,uint256,uint256,uint256)": EventFragment;
    "IncomeReversed(uint256,uint256,uint256,uint256)": EventFragment;
    "MaxCreditLineChanged(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolChanged(address,address)": EventFragment;
    "PoolDefaultGracePeriodChanged(uint256,address)": EventFragment;
    "PoolLiquidityCapChanged(uint256,address)": EventFragment;
    "PoolNameChanged(string,address)": EventFragment;
    "PoolOwnerRewardsAndLiquidityChanged(uint256,uint256,address)": EventFragment;
    "PoolPayPeriodChanged(uint256,address)": EventFragment;
    "PoolRewardsWithdrawn(address,uint256,address)": EventFragment;
    "ProtocolRewardsWithdrawn(address,uint256,address)": EventFragment;
    "ReceivableRequiredInBpsChanged(uint256,address)": EventFragment;
    "WithdrawalLockoutPeriodChanged(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "APRChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CreditApprovalExpirationChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EARewardsAndLiquidityChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvaluationAgentChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EvaluationAgentRewardsWithdrawn"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HDTChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HumaConfigChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncomeDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncomeReversed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxCreditLineChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolDefaultGracePeriodChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolLiquidityCapChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolNameChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolOwnerRewardsAndLiquidityChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolPayPeriodChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolRewardsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolRewardsWithdrawn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReceivableRequiredInBpsChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawalLockoutPeriodChanged"
  ): EventFragment;
}

export interface APRChangedEventObject {
  aprInBps: BigNumber;
  by: string;
}
export type APRChangedEvent = TypedEvent<
  [BigNumber, string],
  APRChangedEventObject
>;

export type APRChangedEventFilter = TypedEventFilter<APRChangedEvent>;

export interface CreditApprovalExpirationChangedEventObject {
  durationInSeconds: BigNumber;
  by: string;
}
export type CreditApprovalExpirationChangedEvent = TypedEvent<
  [BigNumber, string],
  CreditApprovalExpirationChangedEventObject
>;

export type CreditApprovalExpirationChangedEventFilter =
  TypedEventFilter<CreditApprovalExpirationChangedEvent>;

export interface EARewardsAndLiquidityChangedEventObject {
  rewardsRate: BigNumber;
  liquidityRate: BigNumber;
  by: string;
}
export type EARewardsAndLiquidityChangedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  EARewardsAndLiquidityChangedEventObject
>;

export type EARewardsAndLiquidityChangedEventFilter =
  TypedEventFilter<EARewardsAndLiquidityChangedEvent>;

export interface EvaluationAgentChangedEventObject {
  oldEA: string;
  newEA: string;
  newEAId: BigNumber;
  by: string;
}
export type EvaluationAgentChangedEvent = TypedEvent<
  [string, string, BigNumber, string],
  EvaluationAgentChangedEventObject
>;

export type EvaluationAgentChangedEventFilter =
  TypedEventFilter<EvaluationAgentChangedEvent>;

export interface EvaluationAgentRewardsWithdrawnEventObject {
  receiver: string;
  amount: BigNumber;
  by: string;
}
export type EvaluationAgentRewardsWithdrawnEvent = TypedEvent<
  [string, BigNumber, string],
  EvaluationAgentRewardsWithdrawnEventObject
>;

export type EvaluationAgentRewardsWithdrawnEventFilter =
  TypedEventFilter<EvaluationAgentRewardsWithdrawnEvent>;

export interface FeeManagerChangedEventObject {
  feeManager: string;
  by: string;
}
export type FeeManagerChangedEvent = TypedEvent<
  [string, string],
  FeeManagerChangedEventObject
>;

export type FeeManagerChangedEventFilter =
  TypedEventFilter<FeeManagerChangedEvent>;

export interface HDTChangedEventObject {
  hdt: string;
  udnerlyingToken: string;
  by: string;
}
export type HDTChangedEvent = TypedEvent<
  [string, string, string],
  HDTChangedEventObject
>;

export type HDTChangedEventFilter = TypedEventFilter<HDTChangedEvent>;

export interface HumaConfigChangedEventObject {
  humaConfig: string;
  by: string;
}
export type HumaConfigChangedEvent = TypedEvent<
  [string, string],
  HumaConfigChangedEventObject
>;

export type HumaConfigChangedEventFilter =
  TypedEventFilter<HumaConfigChangedEvent>;

export interface IncomeDistributedEventObject {
  protocolFee: BigNumber;
  ownerIncome: BigNumber;
  eaIncome: BigNumber;
  poolIncome: BigNumber;
}
export type IncomeDistributedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  IncomeDistributedEventObject
>;

export type IncomeDistributedEventFilter =
  TypedEventFilter<IncomeDistributedEvent>;

export interface IncomeReversedEventObject {
  protocolFee: BigNumber;
  ownerIncome: BigNumber;
  eaIncome: BigNumber;
  poolIncome: BigNumber;
}
export type IncomeReversedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  IncomeReversedEventObject
>;

export type IncomeReversedEventFilter = TypedEventFilter<IncomeReversedEvent>;

export interface MaxCreditLineChangedEventObject {
  maxCreditLine: BigNumber;
  by: string;
}
export type MaxCreditLineChangedEvent = TypedEvent<
  [BigNumber, string],
  MaxCreditLineChangedEventObject
>;

export type MaxCreditLineChangedEventFilter =
  TypedEventFilter<MaxCreditLineChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolChangedEventObject {
  pool: string;
  by: string;
}
export type PoolChangedEvent = TypedEvent<
  [string, string],
  PoolChangedEventObject
>;

export type PoolChangedEventFilter = TypedEventFilter<PoolChangedEvent>;

export interface PoolDefaultGracePeriodChangedEventObject {
  gracePeriodInDays: BigNumber;
  by: string;
}
export type PoolDefaultGracePeriodChangedEvent = TypedEvent<
  [BigNumber, string],
  PoolDefaultGracePeriodChangedEventObject
>;

export type PoolDefaultGracePeriodChangedEventFilter =
  TypedEventFilter<PoolDefaultGracePeriodChangedEvent>;

export interface PoolLiquidityCapChangedEventObject {
  liquidityCap: BigNumber;
  by: string;
}
export type PoolLiquidityCapChangedEvent = TypedEvent<
  [BigNumber, string],
  PoolLiquidityCapChangedEventObject
>;

export type PoolLiquidityCapChangedEventFilter =
  TypedEventFilter<PoolLiquidityCapChangedEvent>;

export interface PoolNameChangedEventObject {
  name: string;
  by: string;
}
export type PoolNameChangedEvent = TypedEvent<
  [string, string],
  PoolNameChangedEventObject
>;

export type PoolNameChangedEventFilter = TypedEventFilter<PoolNameChangedEvent>;

export interface PoolOwnerRewardsAndLiquidityChangedEventObject {
  rewardsRate: BigNumber;
  liquidityRate: BigNumber;
  by: string;
}
export type PoolOwnerRewardsAndLiquidityChangedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  PoolOwnerRewardsAndLiquidityChangedEventObject
>;

export type PoolOwnerRewardsAndLiquidityChangedEventFilter =
  TypedEventFilter<PoolOwnerRewardsAndLiquidityChangedEvent>;

export interface PoolPayPeriodChangedEventObject {
  periodInDays: BigNumber;
  by: string;
}
export type PoolPayPeriodChangedEvent = TypedEvent<
  [BigNumber, string],
  PoolPayPeriodChangedEventObject
>;

export type PoolPayPeriodChangedEventFilter =
  TypedEventFilter<PoolPayPeriodChangedEvent>;

export interface PoolRewardsWithdrawnEventObject {
  receiver: string;
  amount: BigNumber;
  by: string;
}
export type PoolRewardsWithdrawnEvent = TypedEvent<
  [string, BigNumber, string],
  PoolRewardsWithdrawnEventObject
>;

export type PoolRewardsWithdrawnEventFilter =
  TypedEventFilter<PoolRewardsWithdrawnEvent>;

export interface ProtocolRewardsWithdrawnEventObject {
  receiver: string;
  amount: BigNumber;
  by: string;
}
export type ProtocolRewardsWithdrawnEvent = TypedEvent<
  [string, BigNumber, string],
  ProtocolRewardsWithdrawnEventObject
>;

export type ProtocolRewardsWithdrawnEventFilter =
  TypedEventFilter<ProtocolRewardsWithdrawnEvent>;

export interface ReceivableRequiredInBpsChangedEventObject {
  receivableInBps: BigNumber;
  by: string;
}
export type ReceivableRequiredInBpsChangedEvent = TypedEvent<
  [BigNumber, string],
  ReceivableRequiredInBpsChangedEventObject
>;

export type ReceivableRequiredInBpsChangedEventFilter =
  TypedEventFilter<ReceivableRequiredInBpsChangedEvent>;

export interface WithdrawalLockoutPeriodChangedEventObject {
  lockoutPeriodInDays: BigNumber;
  by: string;
}
export type WithdrawalLockoutPeriodChangedEvent = TypedEvent<
  [BigNumber, string],
  WithdrawalLockoutPeriodChangedEventObject
>;

export type WithdrawalLockoutPeriodChangedEventFilter =
  TypedEventFilter<WithdrawalLockoutPeriodChangedEvent>;

export interface BasePoolConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BasePoolConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accruedIncome(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        protocolIncome: BigNumber;
        poolOwnerIncome: BigNumber;
        eaIncome: BigNumber;
        protocolIncomeWithdrawn: BigNumber;
        poolOwnerIncomeWithdrawn: BigNumber;
        eaIncomeWithdrawn: BigNumber;
      }
    >;

    checkLiquidityRequirement(overrides?: CallOverrides): Promise<[void]>;

    checkLiquidityRequirementForEA(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkLiquidityRequirementForPoolOwner(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    creditApprovalExpirationInSeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distributeIncome(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    evaluationAgent(overrides?: CallOverrides): Promise<[string]>;

    evaluationAgentId(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeManager(overrides?: CallOverrides): Promise<[string]>;

    getCoreData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        underlyingToken_: string;
        poolToken_: string;
        humaConfig_: string;
        feeManager_: string;
      }
    >;

    getPoolSummary(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        string
      ] & {
        token: string;
        apr: BigNumber;
        payPeriod: BigNumber;
        maxCreditAmount: BigNumber;
        liquiditycap: BigNumber;
        name: string;
        symbol: string;
        decimals: number;
        eaId: BigNumber;
        eaNFTAddress: string;
      }
    >;

    humaConfig(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _poolName: PromiseOrValue<string>,
      _poolToken: PromiseOrValue<string>,
      _humaConfig: PromiseOrValue<string>,
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOwnerOrEA(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxCreditLine(overrides?: CallOverrides): Promise<[BigNumber]>;

    onlyOwnerOrEA(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    onlyOwnerOrHumaMasterAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payPeriodInDays(overrides?: CallOverrides): Promise<[BigNumber]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    poolAprInBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolDefaultGracePeriodInSeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolLiquidityCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolName(overrides?: CallOverrides): Promise<[string]>;

    poolToken(overrides?: CallOverrides): Promise<[string]>;

    receivableRequiredInBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reverseIncome(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardsAndLiquidityRateForEA(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    rewardsAndLiquidityRateForPoolOwner(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    setAPR(
      aprInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCreditApprovalExpiration(
      durationInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEARewardsAndLiquidity(
      rewardsRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEvaluationAgent(
      eaId: PromiseOrValue<BigNumberish>,
      agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeManager(
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHumaConfig(
      _humaConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxCreditLine(
      creditLine: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPool(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolDefaultGracePeriod(
      gracePeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolLiquidityCap(
      liquidityCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolName(
      newName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolOwnerRewardsAndLiquidity(
      rewardsRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolPayPeriod(
      periodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolToken(
      _poolToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReceivableRequiredInBps(
      receivableInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalLockoutPeriod(
      lockoutPeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    withdrawEAFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawPoolOwnerFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawProtocolFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawalLockoutPeriodInSeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  accruedIncome(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      protocolIncome: BigNumber;
      poolOwnerIncome: BigNumber;
      eaIncome: BigNumber;
      protocolIncomeWithdrawn: BigNumber;
      poolOwnerIncomeWithdrawn: BigNumber;
      eaIncomeWithdrawn: BigNumber;
    }
  >;

  checkLiquidityRequirement(overrides?: CallOverrides): Promise<void>;

  checkLiquidityRequirementForEA(
    balance: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  checkLiquidityRequirementForPoolOwner(
    balance: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  creditApprovalExpirationInSeconds(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distributeIncome(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  evaluationAgent(overrides?: CallOverrides): Promise<string>;

  evaluationAgentId(overrides?: CallOverrides): Promise<BigNumber>;

  feeManager(overrides?: CallOverrides): Promise<string>;

  getCoreData(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      underlyingToken_: string;
      poolToken_: string;
      humaConfig_: string;
      feeManager_: string;
    }
  >;

  getPoolSummary(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      number,
      BigNumber,
      string
    ] & {
      token: string;
      apr: BigNumber;
      payPeriod: BigNumber;
      maxCreditAmount: BigNumber;
      liquiditycap: BigNumber;
      name: string;
      symbol: string;
      decimals: number;
      eaId: BigNumber;
      eaNFTAddress: string;
    }
  >;

  humaConfig(overrides?: CallOverrides): Promise<string>;

  initialize(
    _poolName: PromiseOrValue<string>,
    _poolToken: PromiseOrValue<string>,
    _humaConfig: PromiseOrValue<string>,
    _feeManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOwnerOrEA(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxCreditLine(overrides?: CallOverrides): Promise<BigNumber>;

  onlyOwnerOrEA(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  onlyOwnerOrHumaMasterAdmin(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  owner(overrides?: CallOverrides): Promise<string>;

  payPeriodInDays(overrides?: CallOverrides): Promise<BigNumber>;

  pool(overrides?: CallOverrides): Promise<string>;

  poolAprInBps(overrides?: CallOverrides): Promise<BigNumber>;

  poolDefaultGracePeriodInSeconds(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolLiquidityCap(overrides?: CallOverrides): Promise<BigNumber>;

  poolName(overrides?: CallOverrides): Promise<string>;

  poolToken(overrides?: CallOverrides): Promise<string>;

  receivableRequiredInBps(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reverseIncome(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardsAndLiquidityRateForEA(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  rewardsAndLiquidityRateForPoolOwner(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  setAPR(
    aprInBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCreditApprovalExpiration(
    durationInDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEARewardsAndLiquidity(
    rewardsRate: PromiseOrValue<BigNumberish>,
    liquidityRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEvaluationAgent(
    eaId: PromiseOrValue<BigNumberish>,
    agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeManager(
    _feeManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHumaConfig(
    _humaConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxCreditLine(
    creditLine: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPool(
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolDefaultGracePeriod(
    gracePeriodInDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolLiquidityCap(
    liquidityCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolName(
    newName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolOwnerRewardsAndLiquidity(
    rewardsRate: PromiseOrValue<BigNumberish>,
    liquidityRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolPayPeriod(
    periodInDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolToken(
    _poolToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReceivableRequiredInBps(
    receivableInBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalLockoutPeriod(
    lockoutPeriodInDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  withdrawEAFee(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawPoolOwnerFee(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawProtocolFee(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawalLockoutPeriodInSeconds(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    accruedIncome(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        protocolIncome: BigNumber;
        poolOwnerIncome: BigNumber;
        eaIncome: BigNumber;
        protocolIncomeWithdrawn: BigNumber;
        poolOwnerIncomeWithdrawn: BigNumber;
        eaIncomeWithdrawn: BigNumber;
      }
    >;

    checkLiquidityRequirement(overrides?: CallOverrides): Promise<void>;

    checkLiquidityRequirementForEA(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkLiquidityRequirementForPoolOwner(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    creditApprovalExpirationInSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeIncome(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    evaluationAgent(overrides?: CallOverrides): Promise<string>;

    evaluationAgentId(overrides?: CallOverrides): Promise<BigNumber>;

    feeManager(overrides?: CallOverrides): Promise<string>;

    getCoreData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        underlyingToken_: string;
        poolToken_: string;
        humaConfig_: string;
        feeManager_: string;
      }
    >;

    getPoolSummary(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        string
      ] & {
        token: string;
        apr: BigNumber;
        payPeriod: BigNumber;
        maxCreditAmount: BigNumber;
        liquiditycap: BigNumber;
        name: string;
        symbol: string;
        decimals: number;
        eaId: BigNumber;
        eaNFTAddress: string;
      }
    >;

    humaConfig(overrides?: CallOverrides): Promise<string>;

    initialize(
      _poolName: PromiseOrValue<string>,
      _poolToken: PromiseOrValue<string>,
      _humaConfig: PromiseOrValue<string>,
      _feeManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isOwnerOrEA(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxCreditLine(overrides?: CallOverrides): Promise<BigNumber>;

    onlyOwnerOrEA(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    onlyOwnerOrHumaMasterAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    payPeriodInDays(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<string>;

    poolAprInBps(overrides?: CallOverrides): Promise<BigNumber>;

    poolDefaultGracePeriodInSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLiquidityCap(overrides?: CallOverrides): Promise<BigNumber>;

    poolName(overrides?: CallOverrides): Promise<string>;

    poolToken(overrides?: CallOverrides): Promise<string>;

    receivableRequiredInBps(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reverseIncome(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsAndLiquidityRateForEA(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    rewardsAndLiquidityRateForPoolOwner(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    setAPR(
      aprInBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreditApprovalExpiration(
      durationInDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEARewardsAndLiquidity(
      rewardsRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEvaluationAgent(
      eaId: PromiseOrValue<BigNumberish>,
      agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeManager(
      _feeManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHumaConfig(
      _humaConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCreditLine(
      creditLine: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPool(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolDefaultGracePeriod(
      gracePeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolLiquidityCap(
      liquidityCap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolName(
      newName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolOwnerRewardsAndLiquidity(
      rewardsRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolPayPeriod(
      periodInDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolToken(
      _poolToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReceivableRequiredInBps(
      receivableInBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalLockoutPeriod(
      lockoutPeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    withdrawEAFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPoolOwnerFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProtocolFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalLockoutPeriodInSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "APRChanged(uint256,address)"(
      aprInBps?: null,
      by?: null
    ): APRChangedEventFilter;
    APRChanged(aprInBps?: null, by?: null): APRChangedEventFilter;

    "CreditApprovalExpirationChanged(uint256,address)"(
      durationInSeconds?: null,
      by?: null
    ): CreditApprovalExpirationChangedEventFilter;
    CreditApprovalExpirationChanged(
      durationInSeconds?: null,
      by?: null
    ): CreditApprovalExpirationChangedEventFilter;

    "EARewardsAndLiquidityChanged(uint256,uint256,address)"(
      rewardsRate?: null,
      liquidityRate?: null,
      by?: PromiseOrValue<string> | null
    ): EARewardsAndLiquidityChangedEventFilter;
    EARewardsAndLiquidityChanged(
      rewardsRate?: null,
      liquidityRate?: null,
      by?: PromiseOrValue<string> | null
    ): EARewardsAndLiquidityChangedEventFilter;

    "EvaluationAgentChanged(address,address,uint256,address)"(
      oldEA?: null,
      newEA?: null,
      newEAId?: null,
      by?: null
    ): EvaluationAgentChangedEventFilter;
    EvaluationAgentChanged(
      oldEA?: null,
      newEA?: null,
      newEAId?: null,
      by?: null
    ): EvaluationAgentChangedEventFilter;

    "EvaluationAgentRewardsWithdrawn(address,uint256,address)"(
      receiver?: null,
      amount?: null,
      by?: null
    ): EvaluationAgentRewardsWithdrawnEventFilter;
    EvaluationAgentRewardsWithdrawn(
      receiver?: null,
      amount?: null,
      by?: null
    ): EvaluationAgentRewardsWithdrawnEventFilter;

    "FeeManagerChanged(address,address)"(
      feeManager?: null,
      by?: null
    ): FeeManagerChangedEventFilter;
    FeeManagerChanged(
      feeManager?: null,
      by?: null
    ): FeeManagerChangedEventFilter;

    "HDTChanged(address,address,address)"(
      hdt?: null,
      udnerlyingToken?: null,
      by?: null
    ): HDTChangedEventFilter;
    HDTChanged(
      hdt?: null,
      udnerlyingToken?: null,
      by?: null
    ): HDTChangedEventFilter;

    "HumaConfigChanged(address,address)"(
      humaConfig?: null,
      by?: null
    ): HumaConfigChangedEventFilter;
    HumaConfigChanged(
      humaConfig?: null,
      by?: null
    ): HumaConfigChangedEventFilter;

    "IncomeDistributed(uint256,uint256,uint256,uint256)"(
      protocolFee?: null,
      ownerIncome?: null,
      eaIncome?: null,
      poolIncome?: null
    ): IncomeDistributedEventFilter;
    IncomeDistributed(
      protocolFee?: null,
      ownerIncome?: null,
      eaIncome?: null,
      poolIncome?: null
    ): IncomeDistributedEventFilter;

    "IncomeReversed(uint256,uint256,uint256,uint256)"(
      protocolFee?: null,
      ownerIncome?: null,
      eaIncome?: null,
      poolIncome?: null
    ): IncomeReversedEventFilter;
    IncomeReversed(
      protocolFee?: null,
      ownerIncome?: null,
      eaIncome?: null,
      poolIncome?: null
    ): IncomeReversedEventFilter;

    "MaxCreditLineChanged(uint256,address)"(
      maxCreditLine?: null,
      by?: null
    ): MaxCreditLineChangedEventFilter;
    MaxCreditLineChanged(
      maxCreditLine?: null,
      by?: null
    ): MaxCreditLineChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PoolChanged(address,address)"(
      pool?: null,
      by?: null
    ): PoolChangedEventFilter;
    PoolChanged(pool?: null, by?: null): PoolChangedEventFilter;

    "PoolDefaultGracePeriodChanged(uint256,address)"(
      gracePeriodInDays?: null,
      by?: null
    ): PoolDefaultGracePeriodChangedEventFilter;
    PoolDefaultGracePeriodChanged(
      gracePeriodInDays?: null,
      by?: null
    ): PoolDefaultGracePeriodChangedEventFilter;

    "PoolLiquidityCapChanged(uint256,address)"(
      liquidityCap?: null,
      by?: null
    ): PoolLiquidityCapChangedEventFilter;
    PoolLiquidityCapChanged(
      liquidityCap?: null,
      by?: null
    ): PoolLiquidityCapChangedEventFilter;

    "PoolNameChanged(string,address)"(
      name?: null,
      by?: null
    ): PoolNameChangedEventFilter;
    PoolNameChanged(name?: null, by?: null): PoolNameChangedEventFilter;

    "PoolOwnerRewardsAndLiquidityChanged(uint256,uint256,address)"(
      rewardsRate?: null,
      liquidityRate?: null,
      by?: PromiseOrValue<string> | null
    ): PoolOwnerRewardsAndLiquidityChangedEventFilter;
    PoolOwnerRewardsAndLiquidityChanged(
      rewardsRate?: null,
      liquidityRate?: null,
      by?: PromiseOrValue<string> | null
    ): PoolOwnerRewardsAndLiquidityChangedEventFilter;

    "PoolPayPeriodChanged(uint256,address)"(
      periodInDays?: null,
      by?: null
    ): PoolPayPeriodChangedEventFilter;
    PoolPayPeriodChanged(
      periodInDays?: null,
      by?: null
    ): PoolPayPeriodChangedEventFilter;

    "PoolRewardsWithdrawn(address,uint256,address)"(
      receiver?: null,
      amount?: null,
      by?: null
    ): PoolRewardsWithdrawnEventFilter;
    PoolRewardsWithdrawn(
      receiver?: null,
      amount?: null,
      by?: null
    ): PoolRewardsWithdrawnEventFilter;

    "ProtocolRewardsWithdrawn(address,uint256,address)"(
      receiver?: null,
      amount?: null,
      by?: null
    ): ProtocolRewardsWithdrawnEventFilter;
    ProtocolRewardsWithdrawn(
      receiver?: null,
      amount?: null,
      by?: null
    ): ProtocolRewardsWithdrawnEventFilter;

    "ReceivableRequiredInBpsChanged(uint256,address)"(
      receivableInBps?: null,
      by?: null
    ): ReceivableRequiredInBpsChangedEventFilter;
    ReceivableRequiredInBpsChanged(
      receivableInBps?: null,
      by?: null
    ): ReceivableRequiredInBpsChangedEventFilter;

    "WithdrawalLockoutPeriodChanged(uint256,address)"(
      lockoutPeriodInDays?: null,
      by?: null
    ): WithdrawalLockoutPeriodChangedEventFilter;
    WithdrawalLockoutPeriodChanged(
      lockoutPeriodInDays?: null,
      by?: null
    ): WithdrawalLockoutPeriodChangedEventFilter;
  };

  estimateGas: {
    accruedIncome(overrides?: CallOverrides): Promise<BigNumber>;

    checkLiquidityRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    checkLiquidityRequirementForEA(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkLiquidityRequirementForPoolOwner(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditApprovalExpirationInSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeIncome(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    evaluationAgent(overrides?: CallOverrides): Promise<BigNumber>;

    evaluationAgentId(overrides?: CallOverrides): Promise<BigNumber>;

    feeManager(overrides?: CallOverrides): Promise<BigNumber>;

    getCoreData(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolSummary(overrides?: CallOverrides): Promise<BigNumber>;

    humaConfig(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _poolName: PromiseOrValue<string>,
      _poolToken: PromiseOrValue<string>,
      _humaConfig: PromiseOrValue<string>,
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOwnerOrEA(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxCreditLine(overrides?: CallOverrides): Promise<BigNumber>;

    onlyOwnerOrEA(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onlyOwnerOrHumaMasterAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payPeriodInDays(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    poolAprInBps(overrides?: CallOverrides): Promise<BigNumber>;

    poolDefaultGracePeriodInSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLiquidityCap(overrides?: CallOverrides): Promise<BigNumber>;

    poolName(overrides?: CallOverrides): Promise<BigNumber>;

    poolToken(overrides?: CallOverrides): Promise<BigNumber>;

    receivableRequiredInBps(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reverseIncome(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardsAndLiquidityRateForEA(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsAndLiquidityRateForPoolOwner(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAPR(
      aprInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCreditApprovalExpiration(
      durationInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEARewardsAndLiquidity(
      rewardsRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEvaluationAgent(
      eaId: PromiseOrValue<BigNumberish>,
      agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeManager(
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHumaConfig(
      _humaConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxCreditLine(
      creditLine: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPool(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolDefaultGracePeriod(
      gracePeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolLiquidityCap(
      liquidityCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolName(
      newName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolOwnerRewardsAndLiquidity(
      rewardsRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolPayPeriod(
      periodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolToken(
      _poolToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReceivableRequiredInBps(
      receivableInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawalLockoutPeriod(
      lockoutPeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawEAFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawPoolOwnerFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawProtocolFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawalLockoutPeriodInSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accruedIncome(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkLiquidityRequirement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkLiquidityRequirementForEA(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkLiquidityRequirementForPoolOwner(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditApprovalExpirationInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributeIncome(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    evaluationAgent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    evaluationAgentId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCoreData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolSummary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    humaConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _poolName: PromiseOrValue<string>,
      _poolToken: PromiseOrValue<string>,
      _humaConfig: PromiseOrValue<string>,
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOwnerOrEA(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxCreditLine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyOwnerOrEA(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onlyOwnerOrHumaMasterAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payPeriodInDays(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolAprInBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolDefaultGracePeriodInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLiquidityCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivableRequiredInBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reverseIncome(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardsAndLiquidityRateForEA(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsAndLiquidityRateForPoolOwner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAPR(
      aprInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCreditApprovalExpiration(
      durationInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEARewardsAndLiquidity(
      rewardsRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEvaluationAgent(
      eaId: PromiseOrValue<BigNumberish>,
      agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeManager(
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHumaConfig(
      _humaConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxCreditLine(
      creditLine: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPool(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolDefaultGracePeriod(
      gracePeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolLiquidityCap(
      liquidityCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolName(
      newName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolOwnerRewardsAndLiquidity(
      rewardsRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolPayPeriod(
      periodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolToken(
      _poolToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReceivableRequiredInBps(
      receivableInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalLockoutPeriod(
      lockoutPeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawEAFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPoolOwnerFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalLockoutPeriodInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
