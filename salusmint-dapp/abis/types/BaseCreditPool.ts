/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace BaseStructs {
  export type CreditRecordStruct = {
    unbilledPrincipal: PromiseOrValue<BigNumberish>;
    dueDate: PromiseOrValue<BigNumberish>;
    correction: PromiseOrValue<BigNumberish>;
    totalDue: PromiseOrValue<BigNumberish>;
    feesAndInterestDue: PromiseOrValue<BigNumberish>;
    missedPeriods: PromiseOrValue<BigNumberish>;
    remainingPeriods: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
  };

  export type CreditRecordStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number
  ] & {
    unbilledPrincipal: BigNumber;
    dueDate: BigNumber;
    correction: BigNumber;
    totalDue: BigNumber;
    feesAndInterestDue: BigNumber;
    missedPeriods: number;
    remainingPeriods: number;
    state: number;
  };

  export type CreditRecordStaticStruct = {
    creditLimit: PromiseOrValue<BigNumberish>;
    aprInBps: PromiseOrValue<BigNumberish>;
    intervalInDays: PromiseOrValue<BigNumberish>;
    defaultAmount: PromiseOrValue<BigNumberish>;
  };

  export type CreditRecordStaticStructOutput = [
    BigNumber,
    number,
    number,
    BigNumber
  ] & {
    creditLimit: BigNumber;
    aprInBps: number;
    intervalInDays: number;
    defaultAmount: BigNumber;
  };
}

export interface BaseCreditPoolInterface extends utils.Interface {
  functions: {
    "addApprovedLender(address)": FunctionFragment;
    "approveCredit(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "changeCreditLine(address,uint256)": FunctionFragment;
    "creditRecordMapping(address)": FunctionFragment;
    "creditRecordStaticMapping(address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "disablePool()": FunctionFragment;
    "drawdown(uint256)": FunctionFragment;
    "enablePool()": FunctionFragment;
    "extendCreditLineDuration(address,uint256)": FunctionFragment;
    "getCoreData()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isApproved(address)": FunctionFragment;
    "isApprovedLender(address)": FunctionFragment;
    "isDefaultReady(address)": FunctionFragment;
    "isLate(address)": FunctionFragment;
    "isPoolOn()": FunctionFragment;
    "lastDepositTime(address)": FunctionFragment;
    "makeInitialDeposit(uint256)": FunctionFragment;
    "makePayment(address,uint256)": FunctionFragment;
    "poolConfig()": FunctionFragment;
    "refreshAccount(address)": FunctionFragment;
    "removeApprovedLender(address)": FunctionFragment;
    "requestCredit(uint256,uint256,uint256)": FunctionFragment;
    "setPoolConfig(address)": FunctionFragment;
    "totalPoolValue()": FunctionFragment;
    "triggerDefault(address)": FunctionFragment;
    "updateCoreData()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addApprovedLender"
      | "approveCredit"
      | "changeCreditLine"
      | "creditRecordMapping"
      | "creditRecordStaticMapping"
      | "deposit"
      | "disablePool"
      | "drawdown"
      | "enablePool"
      | "extendCreditLineDuration"
      | "getCoreData"
      | "initialize"
      | "isApproved"
      | "isApprovedLender"
      | "isDefaultReady"
      | "isLate"
      | "isPoolOn"
      | "lastDepositTime"
      | "makeInitialDeposit"
      | "makePayment"
      | "poolConfig"
      | "refreshAccount"
      | "removeApprovedLender"
      | "requestCredit"
      | "setPoolConfig"
      | "totalPoolValue"
      | "triggerDefault"
      | "updateCoreData"
      | "withdraw"
      | "withdrawAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addApprovedLender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveCredit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCreditLine",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditRecordMapping",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditRecordStaticMapping",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disablePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawdown",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "enablePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extendCreditLineDuration",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedLender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDefaultReady",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isPoolOn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastDepositTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeInitialDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "makePayment",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refreshAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeApprovedLender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestCredit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPoolValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "triggerDefault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCoreData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addApprovedLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditRecordMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditRecordStaticMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disablePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawdown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enablePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendCreditLineDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoreData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDefaultReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPoolOn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastDepositTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeInitialDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refreshAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeApprovedLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPoolValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCoreData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "AddApprovedLender(address,address)": EventFragment;
    "BillRefreshed(address,uint256,address)": EventFragment;
    "CreditApproved(address,uint256,uint256,uint256,uint256)": EventFragment;
    "CreditInitiated(address,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "CreditLineChanged(address,uint256,uint256)": EventFragment;
    "CreditLineClosed(address,address,uint8)": EventFragment;
    "CreditLineExtended(address,uint256,uint256,address)": EventFragment;
    "DefaultTriggered(address,uint256,address)": EventFragment;
    "DrawdownMade(address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LiquidityDeposited(address,uint256,uint256)": EventFragment;
    "LiquidityWithdrawn(address,uint256,uint256)": EventFragment;
    "LossesDistributed(uint256,uint256)": EventFragment;
    "PaymentMade(address,uint256,uint256,uint256,address)": EventFragment;
    "PoolConfigChanged(address,address)": EventFragment;
    "PoolCoreDataChanged(address,address,address,address,address)": EventFragment;
    "PoolDisabled(address)": EventFragment;
    "PoolEnabled(address)": EventFragment;
    "RemoveApprovedLender(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddApprovedLender"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BillRefreshed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditLineChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditLineClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditLineExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultTriggered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrawdownMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LossesDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolConfigChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCoreDataChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveApprovedLender"): EventFragment;
}

export interface AddApprovedLenderEventObject {
  lender: string;
  by: string;
}
export type AddApprovedLenderEvent = TypedEvent<
  [string, string],
  AddApprovedLenderEventObject
>;

export type AddApprovedLenderEventFilter =
  TypedEventFilter<AddApprovedLenderEvent>;

export interface BillRefreshedEventObject {
  borrower: string;
  newDueDate: BigNumber;
  by: string;
}
export type BillRefreshedEvent = TypedEvent<
  [string, BigNumber, string],
  BillRefreshedEventObject
>;

export type BillRefreshedEventFilter = TypedEventFilter<BillRefreshedEvent>;

export interface CreditApprovedEventObject {
  borrower: string;
  creditLimit: BigNumber;
  intervalInDays: BigNumber;
  remainingPeriods: BigNumber;
  aprInBps: BigNumber;
}
export type CreditApprovedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  CreditApprovedEventObject
>;

export type CreditApprovedEventFilter = TypedEventFilter<CreditApprovedEvent>;

export interface CreditInitiatedEventObject {
  borrower: string;
  creditLimit: BigNumber;
  aprInBps: BigNumber;
  payPeriodInDays: BigNumber;
  remainingPeriods: BigNumber;
  approved: boolean;
}
export type CreditInitiatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  CreditInitiatedEventObject
>;

export type CreditInitiatedEventFilter = TypedEventFilter<CreditInitiatedEvent>;

export interface CreditLineChangedEventObject {
  borrower: string;
  oldCreditLimit: BigNumber;
  newCreditLimit: BigNumber;
}
export type CreditLineChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CreditLineChangedEventObject
>;

export type CreditLineChangedEventFilter =
  TypedEventFilter<CreditLineChangedEvent>;

export interface CreditLineClosedEventObject {
  borrower: string;
  by: string;
  reasonCode: number;
}
export type CreditLineClosedEvent = TypedEvent<
  [string, string, number],
  CreditLineClosedEventObject
>;

export type CreditLineClosedEventFilter =
  TypedEventFilter<CreditLineClosedEvent>;

export interface CreditLineExtendedEventObject {
  borrower: string;
  numOfPeriods: BigNumber;
  remainingPeriods: BigNumber;
  by: string;
}
export type CreditLineExtendedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  CreditLineExtendedEventObject
>;

export type CreditLineExtendedEventFilter =
  TypedEventFilter<CreditLineExtendedEvent>;

export interface DefaultTriggeredEventObject {
  borrower: string;
  losses: BigNumber;
  by: string;
}
export type DefaultTriggeredEvent = TypedEvent<
  [string, BigNumber, string],
  DefaultTriggeredEventObject
>;

export type DefaultTriggeredEventFilter =
  TypedEventFilter<DefaultTriggeredEvent>;

export interface DrawdownMadeEventObject {
  borrower: string;
  borrowAmount: BigNumber;
  netAmountToBorrower: BigNumber;
}
export type DrawdownMadeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DrawdownMadeEventObject
>;

export type DrawdownMadeEventFilter = TypedEventFilter<DrawdownMadeEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LiquidityDepositedEventObject {
  account: string;
  assetAmount: BigNumber;
  shareAmount: BigNumber;
}
export type LiquidityDepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LiquidityDepositedEventObject
>;

export type LiquidityDepositedEventFilter =
  TypedEventFilter<LiquidityDepositedEvent>;

export interface LiquidityWithdrawnEventObject {
  account: string;
  assetAmount: BigNumber;
  shareAmount: BigNumber;
}
export type LiquidityWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LiquidityWithdrawnEventObject
>;

export type LiquidityWithdrawnEventFilter =
  TypedEventFilter<LiquidityWithdrawnEvent>;

export interface LossesDistributedEventObject {
  lossesDistributed: BigNumber;
  updatedPoolValue: BigNumber;
}
export type LossesDistributedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LossesDistributedEventObject
>;

export type LossesDistributedEventFilter =
  TypedEventFilter<LossesDistributedEvent>;

export interface PaymentMadeEventObject {
  borrower: string;
  amount: BigNumber;
  totalDue: BigNumber;
  unbilledPrincipal: BigNumber;
  by: string;
}
export type PaymentMadeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  PaymentMadeEventObject
>;

export type PaymentMadeEventFilter = TypedEventFilter<PaymentMadeEvent>;

export interface PoolConfigChangedEventObject {
  sender: string;
  newPoolConfig: string;
}
export type PoolConfigChangedEvent = TypedEvent<
  [string, string],
  PoolConfigChangedEventObject
>;

export type PoolConfigChangedEventFilter =
  TypedEventFilter<PoolConfigChangedEvent>;

export interface PoolCoreDataChangedEventObject {
  sender: string;
  underlyingToken: string;
  poolToken: string;
  humaConfig: string;
  feeManager: string;
}
export type PoolCoreDataChangedEvent = TypedEvent<
  [string, string, string, string, string],
  PoolCoreDataChangedEventObject
>;

export type PoolCoreDataChangedEventFilter =
  TypedEventFilter<PoolCoreDataChangedEvent>;

export interface PoolDisabledEventObject {
  by: string;
}
export type PoolDisabledEvent = TypedEvent<[string], PoolDisabledEventObject>;

export type PoolDisabledEventFilter = TypedEventFilter<PoolDisabledEvent>;

export interface PoolEnabledEventObject {
  by: string;
}
export type PoolEnabledEvent = TypedEvent<[string], PoolEnabledEventObject>;

export type PoolEnabledEventFilter = TypedEventFilter<PoolEnabledEvent>;

export interface RemoveApprovedLenderEventObject {
  lender: string;
  by: string;
}
export type RemoveApprovedLenderEvent = TypedEvent<
  [string, string],
  RemoveApprovedLenderEventObject
>;

export type RemoveApprovedLenderEventFilter =
  TypedEventFilter<RemoveApprovedLenderEvent>;

export interface BaseCreditPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BaseCreditPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addApprovedLender(
      lender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveCredit(
      borrower: PromiseOrValue<string>,
      creditLimit: PromiseOrValue<BigNumberish>,
      intervalInDays: PromiseOrValue<BigNumberish>,
      remainingPeriods: PromiseOrValue<BigNumberish>,
      aprInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeCreditLine(
      borrower: PromiseOrValue<string>,
      newCreditLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creditRecordMapping(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BaseStructs.CreditRecordStructOutput]>;

    creditRecordStaticMapping(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BaseStructs.CreditRecordStaticStructOutput]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disablePool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drawdown(
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enablePool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extendCreditLineDuration(
      borrower: PromiseOrValue<string>,
      numOfPeriods: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCoreData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        underlyingToken_: string;
        poolToken_: string;
        humaConfig_: string;
        feeManager_: string;
      }
    >;

    initialize(
      poolConfigAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApproved(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedLender(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDefaultReady(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLate(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPoolOn(
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    lastDepositTime(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    makeInitialDeposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makePayment(
      borrower: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolConfig(overrides?: CallOverrides): Promise<[string]>;

    refreshAccount(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeApprovedLender(
      lender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestCredit(
      creditLimit: PromiseOrValue<BigNumberish>,
      intervalInDays: PromiseOrValue<BigNumberish>,
      numOfPayments: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolConfig(
      poolConfigAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalPoolValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    triggerDefault(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCoreData(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addApprovedLender(
    lender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveCredit(
    borrower: PromiseOrValue<string>,
    creditLimit: PromiseOrValue<BigNumberish>,
    intervalInDays: PromiseOrValue<BigNumberish>,
    remainingPeriods: PromiseOrValue<BigNumberish>,
    aprInBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeCreditLine(
    borrower: PromiseOrValue<string>,
    newCreditLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creditRecordMapping(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BaseStructs.CreditRecordStructOutput>;

  creditRecordStaticMapping(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BaseStructs.CreditRecordStaticStructOutput>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disablePool(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drawdown(
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enablePool(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extendCreditLineDuration(
    borrower: PromiseOrValue<string>,
    numOfPeriods: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCoreData(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      underlyingToken_: string;
      poolToken_: string;
      humaConfig_: string;
      feeManager_: string;
    }
  >;

  initialize(
    poolConfigAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApproved(
    borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedLender(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDefaultReady(
    borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLate(
    borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPoolOn(overrides?: CallOverrides): Promise<boolean>;

  lastDepositTime(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  makeInitialDeposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makePayment(
    borrower: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolConfig(overrides?: CallOverrides): Promise<string>;

  refreshAccount(
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeApprovedLender(
    lender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestCredit(
    creditLimit: PromiseOrValue<BigNumberish>,
    intervalInDays: PromiseOrValue<BigNumberish>,
    numOfPayments: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolConfig(
    poolConfigAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalPoolValue(overrides?: CallOverrides): Promise<BigNumber>;

  triggerDefault(
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCoreData(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addApprovedLender(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveCredit(
      borrower: PromiseOrValue<string>,
      creditLimit: PromiseOrValue<BigNumberish>,
      intervalInDays: PromiseOrValue<BigNumberish>,
      remainingPeriods: PromiseOrValue<BigNumberish>,
      aprInBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeCreditLine(
      borrower: PromiseOrValue<string>,
      newCreditLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    creditRecordMapping(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BaseStructs.CreditRecordStructOutput>;

    creditRecordStaticMapping(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BaseStructs.CreditRecordStaticStructOutput>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disablePool(overrides?: CallOverrides): Promise<void>;

    drawdown(
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    enablePool(overrides?: CallOverrides): Promise<void>;

    extendCreditLineDuration(
      borrower: PromiseOrValue<string>,
      numOfPeriods: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCoreData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        underlyingToken_: string;
        poolToken_: string;
        humaConfig_: string;
        feeManager_: string;
      }
    >;

    initialize(
      poolConfigAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApproved(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedLender(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDefaultReady(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLate(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPoolOn(overrides?: CallOverrides): Promise<boolean>;

    lastDepositTime(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeInitialDeposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    makePayment(
      borrower: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { amountPaid: BigNumber; paidoff: boolean }
    >;

    poolConfig(overrides?: CallOverrides): Promise<string>;

    refreshAccount(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BaseStructs.CreditRecordStructOutput>;

    removeApprovedLender(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestCredit(
      creditLimit: PromiseOrValue<BigNumberish>,
      intervalInDays: PromiseOrValue<BigNumberish>,
      numOfPayments: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolConfig(
      poolConfigAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalPoolValue(overrides?: CallOverrides): Promise<BigNumber>;

    triggerDefault(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCoreData(overrides?: CallOverrides): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddApprovedLender(address,address)"(
      lender?: PromiseOrValue<string> | null,
      by?: null
    ): AddApprovedLenderEventFilter;
    AddApprovedLender(
      lender?: PromiseOrValue<string> | null,
      by?: null
    ): AddApprovedLenderEventFilter;

    "BillRefreshed(address,uint256,address)"(
      borrower?: PromiseOrValue<string> | null,
      newDueDate?: null,
      by?: null
    ): BillRefreshedEventFilter;
    BillRefreshed(
      borrower?: PromiseOrValue<string> | null,
      newDueDate?: null,
      by?: null
    ): BillRefreshedEventFilter;

    "CreditApproved(address,uint256,uint256,uint256,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      creditLimit?: null,
      intervalInDays?: null,
      remainingPeriods?: null,
      aprInBps?: null
    ): CreditApprovedEventFilter;
    CreditApproved(
      borrower?: PromiseOrValue<string> | null,
      creditLimit?: null,
      intervalInDays?: null,
      remainingPeriods?: null,
      aprInBps?: null
    ): CreditApprovedEventFilter;

    "CreditInitiated(address,uint256,uint256,uint256,uint256,bool)"(
      borrower?: PromiseOrValue<string> | null,
      creditLimit?: null,
      aprInBps?: null,
      payPeriodInDays?: null,
      remainingPeriods?: null,
      approved?: null
    ): CreditInitiatedEventFilter;
    CreditInitiated(
      borrower?: PromiseOrValue<string> | null,
      creditLimit?: null,
      aprInBps?: null,
      payPeriodInDays?: null,
      remainingPeriods?: null,
      approved?: null
    ): CreditInitiatedEventFilter;

    "CreditLineChanged(address,uint256,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      oldCreditLimit?: null,
      newCreditLimit?: null
    ): CreditLineChangedEventFilter;
    CreditLineChanged(
      borrower?: PromiseOrValue<string> | null,
      oldCreditLimit?: null,
      newCreditLimit?: null
    ): CreditLineChangedEventFilter;

    "CreditLineClosed(address,address,uint8)"(
      borrower?: PromiseOrValue<string> | null,
      by?: null,
      reasonCode?: null
    ): CreditLineClosedEventFilter;
    CreditLineClosed(
      borrower?: PromiseOrValue<string> | null,
      by?: null,
      reasonCode?: null
    ): CreditLineClosedEventFilter;

    "CreditLineExtended(address,uint256,uint256,address)"(
      borrower?: PromiseOrValue<string> | null,
      numOfPeriods?: null,
      remainingPeriods?: null,
      by?: null
    ): CreditLineExtendedEventFilter;
    CreditLineExtended(
      borrower?: PromiseOrValue<string> | null,
      numOfPeriods?: null,
      remainingPeriods?: null,
      by?: null
    ): CreditLineExtendedEventFilter;

    "DefaultTriggered(address,uint256,address)"(
      borrower?: PromiseOrValue<string> | null,
      losses?: null,
      by?: null
    ): DefaultTriggeredEventFilter;
    DefaultTriggered(
      borrower?: PromiseOrValue<string> | null,
      losses?: null,
      by?: null
    ): DefaultTriggeredEventFilter;

    "DrawdownMade(address,uint256,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      borrowAmount?: null,
      netAmountToBorrower?: null
    ): DrawdownMadeEventFilter;
    DrawdownMade(
      borrower?: PromiseOrValue<string> | null,
      borrowAmount?: null,
      netAmountToBorrower?: null
    ): DrawdownMadeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LiquidityDeposited(address,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      assetAmount?: null,
      shareAmount?: null
    ): LiquidityDepositedEventFilter;
    LiquidityDeposited(
      account?: PromiseOrValue<string> | null,
      assetAmount?: null,
      shareAmount?: null
    ): LiquidityDepositedEventFilter;

    "LiquidityWithdrawn(address,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      assetAmount?: null,
      shareAmount?: null
    ): LiquidityWithdrawnEventFilter;
    LiquidityWithdrawn(
      account?: PromiseOrValue<string> | null,
      assetAmount?: null,
      shareAmount?: null
    ): LiquidityWithdrawnEventFilter;

    "LossesDistributed(uint256,uint256)"(
      lossesDistributed?: null,
      updatedPoolValue?: null
    ): LossesDistributedEventFilter;
    LossesDistributed(
      lossesDistributed?: null,
      updatedPoolValue?: null
    ): LossesDistributedEventFilter;

    "PaymentMade(address,uint256,uint256,uint256,address)"(
      borrower?: PromiseOrValue<string> | null,
      amount?: null,
      totalDue?: null,
      unbilledPrincipal?: null,
      by?: null
    ): PaymentMadeEventFilter;
    PaymentMade(
      borrower?: PromiseOrValue<string> | null,
      amount?: null,
      totalDue?: null,
      unbilledPrincipal?: null,
      by?: null
    ): PaymentMadeEventFilter;

    "PoolConfigChanged(address,address)"(
      sender?: PromiseOrValue<string> | null,
      newPoolConfig?: null
    ): PoolConfigChangedEventFilter;
    PoolConfigChanged(
      sender?: PromiseOrValue<string> | null,
      newPoolConfig?: null
    ): PoolConfigChangedEventFilter;

    "PoolCoreDataChanged(address,address,address,address,address)"(
      sender?: PromiseOrValue<string> | null,
      underlyingToken?: null,
      poolToken?: null,
      humaConfig?: null,
      feeManager?: null
    ): PoolCoreDataChangedEventFilter;
    PoolCoreDataChanged(
      sender?: PromiseOrValue<string> | null,
      underlyingToken?: null,
      poolToken?: null,
      humaConfig?: null,
      feeManager?: null
    ): PoolCoreDataChangedEventFilter;

    "PoolDisabled(address)"(
      by?: PromiseOrValue<string> | null
    ): PoolDisabledEventFilter;
    PoolDisabled(by?: PromiseOrValue<string> | null): PoolDisabledEventFilter;

    "PoolEnabled(address)"(
      by?: PromiseOrValue<string> | null
    ): PoolEnabledEventFilter;
    PoolEnabled(by?: PromiseOrValue<string> | null): PoolEnabledEventFilter;

    "RemoveApprovedLender(address,address)"(
      lender?: PromiseOrValue<string> | null,
      by?: null
    ): RemoveApprovedLenderEventFilter;
    RemoveApprovedLender(
      lender?: PromiseOrValue<string> | null,
      by?: null
    ): RemoveApprovedLenderEventFilter;
  };

  estimateGas: {
    addApprovedLender(
      lender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveCredit(
      borrower: PromiseOrValue<string>,
      creditLimit: PromiseOrValue<BigNumberish>,
      intervalInDays: PromiseOrValue<BigNumberish>,
      remainingPeriods: PromiseOrValue<BigNumberish>,
      aprInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeCreditLine(
      borrower: PromiseOrValue<string>,
      newCreditLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creditRecordMapping(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditRecordStaticMapping(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disablePool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drawdown(
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enablePool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extendCreditLineDuration(
      borrower: PromiseOrValue<string>,
      numOfPeriods: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCoreData(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      poolConfigAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApproved(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedLender(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDefaultReady(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLate(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPoolOn(overrides?: CallOverrides): Promise<BigNumber>;

    lastDepositTime(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeInitialDeposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makePayment(
      borrower: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolConfig(overrides?: CallOverrides): Promise<BigNumber>;

    refreshAccount(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeApprovedLender(
      lender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestCredit(
      creditLimit: PromiseOrValue<BigNumberish>,
      intervalInDays: PromiseOrValue<BigNumberish>,
      numOfPayments: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolConfig(
      poolConfigAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalPoolValue(overrides?: CallOverrides): Promise<BigNumber>;

    triggerDefault(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCoreData(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addApprovedLender(
      lender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveCredit(
      borrower: PromiseOrValue<string>,
      creditLimit: PromiseOrValue<BigNumberish>,
      intervalInDays: PromiseOrValue<BigNumberish>,
      remainingPeriods: PromiseOrValue<BigNumberish>,
      aprInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeCreditLine(
      borrower: PromiseOrValue<string>,
      newCreditLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creditRecordMapping(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditRecordStaticMapping(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disablePool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drawdown(
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enablePool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extendCreditLineDuration(
      borrower: PromiseOrValue<string>,
      numOfPeriods: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCoreData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      poolConfigAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApproved(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedLender(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDefaultReady(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLate(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPoolOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastDepositTime(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeInitialDeposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makePayment(
      borrower: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refreshAccount(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeApprovedLender(
      lender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestCredit(
      creditLimit: PromiseOrValue<BigNumberish>,
      intervalInDays: PromiseOrValue<BigNumberish>,
      numOfPayments: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolConfig(
      poolConfigAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalPoolValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    triggerDefault(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCoreData(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
